// Code generated by cdpgen; DO NOT EDIT!

package cdp

import (
	"context"

	"github.com/mafredri/cdp/cdpcmd"
	"github.com/mafredri/cdp/cdpevent"
)

// The Accessibility domain.
type Accessibility interface {
	// Command GetPartialAXTree
	//
	// Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.
	GetPartialAXTree(context.Context, *cdpcmd.AccessibilityGetPartialAXTreeArgs) (*cdpcmd.AccessibilityGetPartialAXTreeReply, error)
}

// The Animation domain.
type Animation interface {
	// Command Enable
	//
	// Enables animation domain notifications.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables animation domain notifications.
	Disable(context.Context) error

	// Command GetPlaybackRate
	//
	// Gets the playback rate of the document timeline.
	GetPlaybackRate(context.Context) (*cdpcmd.AnimationGetPlaybackRateReply, error)

	// Command SetPlaybackRate
	//
	// Sets the playback rate of the document timeline.
	SetPlaybackRate(context.Context, *cdpcmd.AnimationSetPlaybackRateArgs) error

	// Command GetCurrentTime
	//
	// Returns the current time of the an animation.
	GetCurrentTime(context.Context, *cdpcmd.AnimationGetCurrentTimeArgs) (*cdpcmd.AnimationGetCurrentTimeReply, error)

	// Command SetPaused
	//
	// Sets the paused state of a set of animations.
	SetPaused(context.Context, *cdpcmd.AnimationSetPausedArgs) error

	// Command SetTiming
	//
	// Sets the timing of an animation node.
	SetTiming(context.Context, *cdpcmd.AnimationSetTimingArgs) error

	// Command SeekAnimations
	//
	// Seek a set of animations to a particular time within each animation.
	SeekAnimations(context.Context, *cdpcmd.AnimationSeekAnimationsArgs) error

	// Command ReleaseAnimations
	//
	// Releases a set of animations to no longer be manipulated.
	ReleaseAnimations(context.Context, *cdpcmd.AnimationReleaseAnimationsArgs) error

	// Command ResolveAnimation
	//
	// Gets the remote object of the Animation.
	ResolveAnimation(context.Context, *cdpcmd.AnimationResolveAnimationArgs) (*cdpcmd.AnimationResolveAnimationReply, error)

	// Event AnimationCreated
	//
	// Event for each animation that has been created.
	AnimationCreated(context.Context) (cdpevent.AnimationCreatedClient, error)

	// Event AnimationStarted
	//
	// Event for animation that has been started.
	AnimationStarted(context.Context) (cdpevent.AnimationStartedClient, error)

	// Event AnimationCanceled
	//
	// Event for when an animation has been canceled.
	AnimationCanceled(context.Context) (cdpevent.AnimationCanceledClient, error)
}

// The ApplicationCache domain.
type ApplicationCache interface {
	// Command GetFramesWithManifests
	//
	// Returns array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
	GetFramesWithManifests(context.Context) (*cdpcmd.ApplicationCacheGetFramesWithManifestsReply, error)

	// Command Enable
	//
	// Enables application cache domain notifications.
	Enable(context.Context) error

	// Command GetManifestForFrame
	//
	// Returns manifest URL for document in the given frame.
	GetManifestForFrame(context.Context, *cdpcmd.ApplicationCacheGetManifestForFrameArgs) (*cdpcmd.ApplicationCacheGetManifestForFrameReply, error)

	// Command GetApplicationCacheForFrame
	//
	// Returns relevant application cache data for the document in given frame.
	GetApplicationCacheForFrame(context.Context, *cdpcmd.ApplicationCacheGetApplicationCacheForFrameArgs) (*cdpcmd.ApplicationCacheGetApplicationCacheForFrameReply, error)

	// Event ApplicationCacheStatusUpdated
	//
	//
	ApplicationCacheStatusUpdated(context.Context) (cdpevent.ApplicationCacheStatusUpdatedClient, error)

	// Event NetworkStateUpdated
	//
	//
	NetworkStateUpdated(context.Context) (cdpevent.ApplicationCacheNetworkStateUpdatedClient, error)
}

// The Browser domain. The Browser domain defines methods and events for browser managing.
type Browser interface {
	// Command GetWindowForTarget
	//
	// Get the browser window that contains the devtools target.
	GetWindowForTarget(context.Context, *cdpcmd.BrowserGetWindowForTargetArgs) (*cdpcmd.BrowserGetWindowForTargetReply, error)

	// Command SetWindowBounds
	//
	// Set position and/or size of the browser window.
	SetWindowBounds(context.Context, *cdpcmd.BrowserSetWindowBoundsArgs) error

	// Command GetWindowBounds
	//
	// Get position and size of the browser window.
	GetWindowBounds(context.Context, *cdpcmd.BrowserGetWindowBoundsArgs) (*cdpcmd.BrowserGetWindowBoundsReply, error)
}

// The CSS domain. This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles) have an associated id used in subsequent operations on the related object. Each object type has a specific id structure, and those are not interchangeable between objects of different kinds. CSS objects can be loaded using the get*ForNode() calls (which accept a DOM node id). A client can also discover all the existing stylesheets with the getAllStyleSheets() method (or keeping track of the styleSheetAdded/styleSheetRemoved events) and subsequently load the required stylesheet contents using the getStyleSheet[Text]() methods.
type CSS interface {
	// Command Enable
	//
	// Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables the CSS agent for the given page.
	Disable(context.Context) error

	// Command GetMatchedStylesForNode
	//
	// Returns requested styles for a DOM node identified by nodeId.
	GetMatchedStylesForNode(context.Context, *cdpcmd.CSSGetMatchedStylesForNodeArgs) (*cdpcmd.CSSGetMatchedStylesForNodeReply, error)

	// Command GetInlineStylesForNode
	//
	// Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM attributes) for a DOM node identified by nodeId.
	GetInlineStylesForNode(context.Context, *cdpcmd.CSSGetInlineStylesForNodeArgs) (*cdpcmd.CSSGetInlineStylesForNodeReply, error)

	// Command GetComputedStyleForNode
	//
	// Returns the computed style for a DOM node identified by nodeId.
	GetComputedStyleForNode(context.Context, *cdpcmd.CSSGetComputedStyleForNodeArgs) (*cdpcmd.CSSGetComputedStyleForNodeReply, error)

	// Command GetPlatformFontsForNode
	//
	// Requests information about platform fonts which we used to render child TextNodes in the given node.
	GetPlatformFontsForNode(context.Context, *cdpcmd.CSSGetPlatformFontsForNodeArgs) (*cdpcmd.CSSGetPlatformFontsForNodeReply, error)

	// Command GetStyleSheetText
	//
	// Returns the current textual content and the URL for a stylesheet.
	GetStyleSheetText(context.Context, *cdpcmd.CSSGetStyleSheetTextArgs) (*cdpcmd.CSSGetStyleSheetTextReply, error)

	// Command CollectClassNames
	//
	// Returns all class names from specified stylesheet.
	CollectClassNames(context.Context, *cdpcmd.CSSCollectClassNamesArgs) (*cdpcmd.CSSCollectClassNamesReply, error)

	// Command SetStyleSheetText
	//
	// Sets the new stylesheet text.
	SetStyleSheetText(context.Context, *cdpcmd.CSSSetStyleSheetTextArgs) (*cdpcmd.CSSSetStyleSheetTextReply, error)

	// Command SetRuleSelector
	//
	// Modifies the rule selector.
	SetRuleSelector(context.Context, *cdpcmd.CSSSetRuleSelectorArgs) (*cdpcmd.CSSSetRuleSelectorReply, error)

	// Command SetKeyframeKey
	//
	// Modifies the keyframe rule key text.
	SetKeyframeKey(context.Context, *cdpcmd.CSSSetKeyframeKeyArgs) (*cdpcmd.CSSSetKeyframeKeyReply, error)

	// Command SetStyleTexts
	//
	// Applies specified style edits one after another in the given order.
	SetStyleTexts(context.Context, *cdpcmd.CSSSetStyleTextsArgs) (*cdpcmd.CSSSetStyleTextsReply, error)

	// Command SetMediaText
	//
	// Modifies the rule selector.
	SetMediaText(context.Context, *cdpcmd.CSSSetMediaTextArgs) (*cdpcmd.CSSSetMediaTextReply, error)

	// Command CreateStyleSheet
	//
	// Creates a new special "via-inspector" stylesheet in the frame with given frameId.
	CreateStyleSheet(context.Context, *cdpcmd.CSSCreateStyleSheetArgs) (*cdpcmd.CSSCreateStyleSheetReply, error)

	// Command AddRule
	//
	// Inserts a new rule with the given ruleText in a stylesheet with given styleSheetId, at the position specified by location.
	AddRule(context.Context, *cdpcmd.CSSAddRuleArgs) (*cdpcmd.CSSAddRuleReply, error)

	// Command ForcePseudoState
	//
	// Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser.
	ForcePseudoState(context.Context, *cdpcmd.CSSForcePseudoStateArgs) error

	// Command GetMediaQueries
	//
	// Returns all media queries parsed by the rendering engine.
	GetMediaQueries(context.Context) (*cdpcmd.CSSGetMediaQueriesReply, error)

	// Command SetEffectivePropertyValueForNode
	//
	// Find a rule with the given active property for the given node and set the new value for this property
	SetEffectivePropertyValueForNode(context.Context, *cdpcmd.CSSSetEffectivePropertyValueForNodeArgs) error

	// Command GetBackgroundColors
	//
	//
	GetBackgroundColors(context.Context, *cdpcmd.CSSGetBackgroundColorsArgs) (*cdpcmd.CSSGetBackgroundColorsReply, error)

	// Command GetLayoutTreeAndStyles
	//
	// For the main document and any content documents, return the LayoutTreeNodes and a whitelisted subset of the computed style. It only returns pushed nodes, on way to pull all nodes is to call DOM.getDocument with a depth of -1.
	GetLayoutTreeAndStyles(context.Context, *cdpcmd.CSSGetLayoutTreeAndStylesArgs) (*cdpcmd.CSSGetLayoutTreeAndStylesReply, error)

	// Command StartRuleUsageTracking
	//
	// Enables the selector recording.
	StartRuleUsageTracking(context.Context) error

	// Command TakeCoverageDelta
	//
	// Obtain list of rules that became used since last call to this method (or since start of coverage instrumentation)
	TakeCoverageDelta(context.Context) (*cdpcmd.CSSTakeCoverageDeltaReply, error)

	// Command StopRuleUsageTracking
	//
	// The list of rules with an indication of whether these were used
	StopRuleUsageTracking(context.Context) (*cdpcmd.CSSStopRuleUsageTrackingReply, error)

	// Event MediaQueryResultChanged
	//
	// Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features.
	MediaQueryResultChanged(context.Context) (cdpevent.CSSMediaQueryResultChangedClient, error)

	// Event FontsUpdated
	//
	// Fires whenever a web font gets loaded.
	FontsUpdated(context.Context) (cdpevent.CSSFontsUpdatedClient, error)

	// Event StyleSheetChanged
	//
	// Fired whenever a stylesheet is changed as a result of the client operation.
	StyleSheetChanged(context.Context) (cdpevent.CSSStyleSheetChangedClient, error)

	// Event StyleSheetAdded
	//
	// Fired whenever an active document stylesheet is added.
	StyleSheetAdded(context.Context) (cdpevent.CSSStyleSheetAddedClient, error)

	// Event StyleSheetRemoved
	//
	// Fired whenever an active document stylesheet is removed.
	StyleSheetRemoved(context.Context) (cdpevent.CSSStyleSheetRemovedClient, error)
}

// The CacheStorage domain.
type CacheStorage interface {
	// Command RequestCacheNames
	//
	// Requests cache names.
	RequestCacheNames(context.Context, *cdpcmd.CacheStorageRequestCacheNamesArgs) (*cdpcmd.CacheStorageRequestCacheNamesReply, error)

	// Command RequestEntries
	//
	// Requests data from cache.
	RequestEntries(context.Context, *cdpcmd.CacheStorageRequestEntriesArgs) (*cdpcmd.CacheStorageRequestEntriesReply, error)

	// Command DeleteCache
	//
	// Deletes a cache.
	DeleteCache(context.Context, *cdpcmd.CacheStorageDeleteCacheArgs) error

	// Command DeleteEntry
	//
	// Deletes a cache entry.
	DeleteEntry(context.Context, *cdpcmd.CacheStorageDeleteEntryArgs) error
}

// The Console domain. This domain is deprecated - use Runtime or Log instead.
type Console interface {
	// Command Enable
	//
	// Enables console domain, sends the messages collected so far to the client by means of the messageAdded notification.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables console domain, prevents further console messages from being reported to the client.
	Disable(context.Context) error

	// Command ClearMessages
	//
	// Does nothing.
	ClearMessages(context.Context) error

	// Event MessageAdded
	//
	// Issued when new console message is added.
	MessageAdded(context.Context) (cdpevent.ConsoleMessageAddedClient, error)
}

// The DOM domain. This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an id. This id can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.
//
// Note that iframe owner elements will return corresponding document elements as their child nodes.
type DOM interface {
	// Command Enable
	//
	// Enables DOM agent for the given page.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables DOM agent for the given page.
	Disable(context.Context) error

	// Command GetDocument
	//
	// Returns the root DOM node (and optionally the subtree) to the caller.
	GetDocument(context.Context, *cdpcmd.DOMGetDocumentArgs) (*cdpcmd.DOMGetDocumentReply, error)

	// Command GetFlattenedDocument
	//
	// Returns the root DOM node (and optionally the subtree) to the caller.
	GetFlattenedDocument(context.Context, *cdpcmd.DOMGetFlattenedDocumentArgs) (*cdpcmd.DOMGetFlattenedDocumentReply, error)

	// Command CollectClassNamesFromSubtree
	//
	// Collects class names for the node with given id and all of it's child nodes.
	CollectClassNamesFromSubtree(context.Context, *cdpcmd.DOMCollectClassNamesFromSubtreeArgs) (*cdpcmd.DOMCollectClassNamesFromSubtreeReply, error)

	// Command RequestChildNodes
	//
	// Requests that children of the node with given id are returned to the caller in form of setChildNodes events where not only immediate children are retrieved, but all children down to the specified depth.
	RequestChildNodes(context.Context, *cdpcmd.DOMRequestChildNodesArgs) error

	// Command QuerySelector
	//
	// Executes querySelector on a given node.
	QuerySelector(context.Context, *cdpcmd.DOMQuerySelectorArgs) (*cdpcmd.DOMQuerySelectorReply, error)

	// Command QuerySelectorAll
	//
	// Executes querySelectorAll on a given node.
	QuerySelectorAll(context.Context, *cdpcmd.DOMQuerySelectorAllArgs) (*cdpcmd.DOMQuerySelectorAllReply, error)

	// Command SetNodeName
	//
	// Sets node name for a node with given id.
	SetNodeName(context.Context, *cdpcmd.DOMSetNodeNameArgs) (*cdpcmd.DOMSetNodeNameReply, error)

	// Command SetNodeValue
	//
	// Sets node value for a node with given id.
	SetNodeValue(context.Context, *cdpcmd.DOMSetNodeValueArgs) error

	// Command RemoveNode
	//
	// Removes node with given id.
	RemoveNode(context.Context, *cdpcmd.DOMRemoveNodeArgs) error

	// Command SetAttributeValue
	//
	// Sets attribute for an element with given id.
	SetAttributeValue(context.Context, *cdpcmd.DOMSetAttributeValueArgs) error

	// Command SetAttributesAsText
	//
	// Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs.
	SetAttributesAsText(context.Context, *cdpcmd.DOMSetAttributesAsTextArgs) error

	// Command RemoveAttribute
	//
	// Removes attribute with given name from an element with given id.
	RemoveAttribute(context.Context, *cdpcmd.DOMRemoveAttributeArgs) error

	// Command GetOuterHTML
	//
	// Returns node's HTML markup.
	GetOuterHTML(context.Context, *cdpcmd.DOMGetOuterHTMLArgs) (*cdpcmd.DOMGetOuterHTMLReply, error)

	// Command SetOuterHTML
	//
	// Sets node HTML markup, returns new node id.
	SetOuterHTML(context.Context, *cdpcmd.DOMSetOuterHTMLArgs) error

	// Command PerformSearch
	//
	// Searches for a given string in the DOM tree. Use getSearchResults to access search results or cancelSearch to end this search session.
	PerformSearch(context.Context, *cdpcmd.DOMPerformSearchArgs) (*cdpcmd.DOMPerformSearchReply, error)

	// Command GetSearchResults
	//
	// Returns search results from given fromIndex to given toIndex from the sarch with the given identifier.
	GetSearchResults(context.Context, *cdpcmd.DOMGetSearchResultsArgs) (*cdpcmd.DOMGetSearchResultsReply, error)

	// Command DiscardSearchResults
	//
	// Discards search results from the session with the given id. getSearchResults should no longer be called for that search.
	DiscardSearchResults(context.Context, *cdpcmd.DOMDiscardSearchResultsArgs) error

	// Command RequestNode
	//
	// Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of setChildNodes notifications.
	RequestNode(context.Context, *cdpcmd.DOMRequestNodeArgs) (*cdpcmd.DOMRequestNodeReply, error)

	// Command HighlightRect
	//
	// Highlights given rectangle.
	HighlightRect(context.Context) error

	// Command HighlightNode
	//
	// Highlights DOM node.
	HighlightNode(context.Context) error

	// Command HideHighlight
	//
	// Hides any highlight.
	HideHighlight(context.Context) error

	// Command PushNodeByPathToFrontend
	//
	// Requests that the node is sent to the caller given its path. // FIXME, use XPath
	PushNodeByPathToFrontend(context.Context, *cdpcmd.DOMPushNodeByPathToFrontendArgs) (*cdpcmd.DOMPushNodeByPathToFrontendReply, error)

	// Command PushNodesByBackendIdsToFrontend
	//
	// Requests that a batch of nodes is sent to the caller given their backend node ids.
	PushNodesByBackendIdsToFrontend(context.Context, *cdpcmd.DOMPushNodesByBackendIdsToFrontendArgs) (*cdpcmd.DOMPushNodesByBackendIdsToFrontendReply, error)

	// Command SetInspectedNode
	//
	// Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
	SetInspectedNode(context.Context, *cdpcmd.DOMSetInspectedNodeArgs) error

	// Command ResolveNode
	//
	// Resolves JavaScript node object for given node id.
	ResolveNode(context.Context, *cdpcmd.DOMResolveNodeArgs) (*cdpcmd.DOMResolveNodeReply, error)

	// Command GetAttributes
	//
	// Returns attributes for the specified node.
	GetAttributes(context.Context, *cdpcmd.DOMGetAttributesArgs) (*cdpcmd.DOMGetAttributesReply, error)

	// Command CopyTo
	//
	// Creates a deep copy of the specified node and places it into the target container before the given anchor.
	CopyTo(context.Context, *cdpcmd.DOMCopyToArgs) (*cdpcmd.DOMCopyToReply, error)

	// Command MoveTo
	//
	// Moves node into the new container, places it before the given anchor.
	MoveTo(context.Context, *cdpcmd.DOMMoveToArgs) (*cdpcmd.DOMMoveToReply, error)

	// Command Undo
	//
	// Undoes the last performed action.
	Undo(context.Context) error

	// Command Redo
	//
	// Re-does the last undone action.
	Redo(context.Context) error

	// Command MarkUndoableState
	//
	// Marks last undoable state.
	MarkUndoableState(context.Context) error

	// Command Focus
	//
	// Focuses the given element.
	Focus(context.Context, *cdpcmd.DOMFocusArgs) error

	// Command SetFileInputFiles
	//
	// Sets files for the given file input element.
	SetFileInputFiles(context.Context, *cdpcmd.DOMSetFileInputFilesArgs) error

	// Command GetBoxModel
	//
	// Returns boxes for the currently selected nodes.
	GetBoxModel(context.Context, *cdpcmd.DOMGetBoxModelArgs) (*cdpcmd.DOMGetBoxModelReply, error)

	// Command GetNodeForLocation
	//
	// Returns node id at given location.
	GetNodeForLocation(context.Context, *cdpcmd.DOMGetNodeForLocationArgs) (*cdpcmd.DOMGetNodeForLocationReply, error)

	// Command GetRelayoutBoundary
	//
	// Returns the id of the nearest ancestor that is a relayout boundary.
	GetRelayoutBoundary(context.Context, *cdpcmd.DOMGetRelayoutBoundaryArgs) (*cdpcmd.DOMGetRelayoutBoundaryReply, error)

	// Event DocumentUpdated
	//
	// Fired when Document has been totally updated. Node ids are no longer valid.
	DocumentUpdated(context.Context) (cdpevent.DOMDocumentUpdatedClient, error)

	// Event SetChildNodes
	//
	// Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids.
	SetChildNodes(context.Context) (cdpevent.DOMSetChildNodesClient, error)

	// Event AttributeModified
	//
	// Fired when Element's attribute is modified.
	AttributeModified(context.Context) (cdpevent.DOMAttributeModifiedClient, error)

	// Event AttributeRemoved
	//
	// Fired when Element's attribute is removed.
	AttributeRemoved(context.Context) (cdpevent.DOMAttributeRemovedClient, error)

	// Event InlineStyleInvalidated
	//
	// Fired when Element's inline style is modified via a CSS property modification.
	InlineStyleInvalidated(context.Context) (cdpevent.DOMInlineStyleInvalidatedClient, error)

	// Event CharacterDataModified
	//
	// Mirrors DOMCharacterDataModified event.
	CharacterDataModified(context.Context) (cdpevent.DOMCharacterDataModifiedClient, error)

	// Event ChildNodeCountUpdated
	//
	// Fired when Container's child node count has changed.
	ChildNodeCountUpdated(context.Context) (cdpevent.DOMChildNodeCountUpdatedClient, error)

	// Event ChildNodeInserted
	//
	// Mirrors DOMNodeInserted event.
	ChildNodeInserted(context.Context) (cdpevent.DOMChildNodeInsertedClient, error)

	// Event ChildNodeRemoved
	//
	// Mirrors DOMNodeRemoved event.
	ChildNodeRemoved(context.Context) (cdpevent.DOMChildNodeRemovedClient, error)

	// Event ShadowRootPushed
	//
	// Called when shadow root is pushed into the element.
	ShadowRootPushed(context.Context) (cdpevent.DOMShadowRootPushedClient, error)

	// Event ShadowRootPopped
	//
	// Called when shadow root is popped from the element.
	ShadowRootPopped(context.Context) (cdpevent.DOMShadowRootPoppedClient, error)

	// Event PseudoElementAdded
	//
	// Called when a pseudo element is added to an element.
	PseudoElementAdded(context.Context) (cdpevent.DOMPseudoElementAddedClient, error)

	// Event PseudoElementRemoved
	//
	// Called when a pseudo element is removed from an element.
	PseudoElementRemoved(context.Context) (cdpevent.DOMPseudoElementRemovedClient, error)

	// Event DistributedNodesUpdated
	//
	// Called when distribution is changed.
	DistributedNodesUpdated(context.Context) (cdpevent.DOMDistributedNodesUpdatedClient, error)
}

// The DOMDebugger domain. DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript execution will stop on these operations as if there was a regular breakpoint set.
type DOMDebugger interface {
	// Command SetDOMBreakpoint
	//
	// Sets breakpoint on particular operation with DOM.
	SetDOMBreakpoint(context.Context, *cdpcmd.DOMDebuggerSetDOMBreakpointArgs) error

	// Command RemoveDOMBreakpoint
	//
	// Removes DOM breakpoint that was set using setDOMBreakpoint.
	RemoveDOMBreakpoint(context.Context, *cdpcmd.DOMDebuggerRemoveDOMBreakpointArgs) error

	// Command SetEventListenerBreakpoint
	//
	// Sets breakpoint on particular DOM event.
	SetEventListenerBreakpoint(context.Context, *cdpcmd.DOMDebuggerSetEventListenerBreakpointArgs) error

	// Command RemoveEventListenerBreakpoint
	//
	// Removes breakpoint on particular DOM event.
	RemoveEventListenerBreakpoint(context.Context, *cdpcmd.DOMDebuggerRemoveEventListenerBreakpointArgs) error

	// Command SetInstrumentationBreakpoint
	//
	// Sets breakpoint on particular native event.
	SetInstrumentationBreakpoint(context.Context, *cdpcmd.DOMDebuggerSetInstrumentationBreakpointArgs) error

	// Command RemoveInstrumentationBreakpoint
	//
	// Removes breakpoint on particular native event.
	RemoveInstrumentationBreakpoint(context.Context, *cdpcmd.DOMDebuggerRemoveInstrumentationBreakpointArgs) error

	// Command SetXHRBreakpoint
	//
	// Sets breakpoint on XMLHttpRequest.
	SetXHRBreakpoint(context.Context, *cdpcmd.DOMDebuggerSetXHRBreakpointArgs) error

	// Command RemoveXHRBreakpoint
	//
	// Removes breakpoint from XMLHttpRequest.
	RemoveXHRBreakpoint(context.Context, *cdpcmd.DOMDebuggerRemoveXHRBreakpointArgs) error

	// Command GetEventListeners
	//
	// Returns event listeners of the given object.
	GetEventListeners(context.Context, *cdpcmd.DOMDebuggerGetEventListenersArgs) (*cdpcmd.DOMDebuggerGetEventListenersReply, error)
}

// The DOMStorage domain. Query and modify DOM storage.
type DOMStorage interface {
	// Command Enable
	//
	// Enables storage tracking, storage events will now be delivered to the client.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables storage tracking, prevents storage events from being sent to the client.
	Disable(context.Context) error

	// Command Clear
	//
	//
	Clear(context.Context, *cdpcmd.DOMStorageClearArgs) error

	// Command GetDOMStorageItems
	//
	//
	GetDOMStorageItems(context.Context, *cdpcmd.DOMStorageGetDOMStorageItemsArgs) (*cdpcmd.DOMStorageGetDOMStorageItemsReply, error)

	// Command SetDOMStorageItem
	//
	//
	SetDOMStorageItem(context.Context, *cdpcmd.DOMStorageSetDOMStorageItemArgs) error

	// Command RemoveDOMStorageItem
	//
	//
	RemoveDOMStorageItem(context.Context, *cdpcmd.DOMStorageRemoveDOMStorageItemArgs) error

	// Event DOMStorageItemsCleared
	//
	//
	DOMStorageItemsCleared(context.Context) (cdpevent.DOMStorageItemsClearedClient, error)

	// Event DOMStorageItemRemoved
	//
	//
	DOMStorageItemRemoved(context.Context) (cdpevent.DOMStorageItemRemovedClient, error)

	// Event DOMStorageItemAdded
	//
	//
	DOMStorageItemAdded(context.Context) (cdpevent.DOMStorageItemAddedClient, error)

	// Event DOMStorageItemUpdated
	//
	//
	DOMStorageItemUpdated(context.Context) (cdpevent.DOMStorageItemUpdatedClient, error)
}

// The Database domain.
type Database interface {
	// Command Enable
	//
	// Enables database tracking, database events will now be delivered to the client.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables database tracking, prevents database events from being sent to the client.
	Disable(context.Context) error

	// Command GetDatabaseTableNames
	//
	//
	GetDatabaseTableNames(context.Context, *cdpcmd.DatabaseGetDatabaseTableNamesArgs) (*cdpcmd.DatabaseGetDatabaseTableNamesReply, error)

	// Command ExecuteSQL
	//
	//
	ExecuteSQL(context.Context, *cdpcmd.DatabaseExecuteSQLArgs) (*cdpcmd.DatabaseExecuteSQLReply, error)

	// Event AddDatabase
	//
	//
	AddDatabase(context.Context) (cdpevent.DatabaseAddDatabaseClient, error)
}

// The Debugger domain. Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc.
type Debugger interface {
	// Command Enable
	//
	// Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables debugger for given page.
	Disable(context.Context) error

	// Command SetBreakpointsActive
	//
	// Activates / deactivates all breakpoints on the page.
	SetBreakpointsActive(context.Context, *cdpcmd.DebuggerSetBreakpointsActiveArgs) error

	// Command SetSkipAllPauses
	//
	// Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
	SetSkipAllPauses(context.Context, *cdpcmd.DebuggerSetSkipAllPausesArgs) error

	// Command SetBreakpointByURL
	//
	// Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in locations property. Further matching script parsing will result in subsequent breakpointResolved events issued. This logical breakpoint will survive page reloads.
	SetBreakpointByURL(context.Context, *cdpcmd.DebuggerSetBreakpointByURLArgs) (*cdpcmd.DebuggerSetBreakpointByURLReply, error)

	// Command SetBreakpoint
	//
	// Sets JavaScript breakpoint at a given location.
	SetBreakpoint(context.Context, *cdpcmd.DebuggerSetBreakpointArgs) (*cdpcmd.DebuggerSetBreakpointReply, error)

	// Command RemoveBreakpoint
	//
	// Removes JavaScript breakpoint.
	RemoveBreakpoint(context.Context, *cdpcmd.DebuggerRemoveBreakpointArgs) error

	// Command GetPossibleBreakpoints
	//
	// Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.
	GetPossibleBreakpoints(context.Context, *cdpcmd.DebuggerGetPossibleBreakpointsArgs) (*cdpcmd.DebuggerGetPossibleBreakpointsReply, error)

	// Command ContinueToLocation
	//
	// Continues execution until specific location is reached.
	ContinueToLocation(context.Context, *cdpcmd.DebuggerContinueToLocationArgs) error

	// Command StepOver
	//
	// Steps over the statement.
	StepOver(context.Context) error

	// Command StepInto
	//
	// Steps into the function call.
	StepInto(context.Context) error

	// Command StepOut
	//
	// Steps out of the function call.
	StepOut(context.Context) error

	// Command Pause
	//
	// Stops on the next JavaScript statement.
	Pause(context.Context) error

	// Command ScheduleStepIntoAsync
	//
	// Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.
	ScheduleStepIntoAsync(context.Context) error

	// Command Resume
	//
	// Resumes JavaScript execution.
	Resume(context.Context) error

	// Command SearchInContent
	//
	// Searches for given string in script content.
	SearchInContent(context.Context, *cdpcmd.DebuggerSearchInContentArgs) (*cdpcmd.DebuggerSearchInContentReply, error)

	// Command SetScriptSource
	//
	// Edits JavaScript source live.
	SetScriptSource(context.Context, *cdpcmd.DebuggerSetScriptSourceArgs) (*cdpcmd.DebuggerSetScriptSourceReply, error)

	// Command RestartFrame
	//
	// Restarts particular call frame from the beginning.
	RestartFrame(context.Context, *cdpcmd.DebuggerRestartFrameArgs) (*cdpcmd.DebuggerRestartFrameReply, error)

	// Command GetScriptSource
	//
	// Returns source for the script with given id.
	GetScriptSource(context.Context, *cdpcmd.DebuggerGetScriptSourceArgs) (*cdpcmd.DebuggerGetScriptSourceReply, error)

	// Command SetPauseOnExceptions
	//
	// Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is none.
	SetPauseOnExceptions(context.Context, *cdpcmd.DebuggerSetPauseOnExceptionsArgs) error

	// Command EvaluateOnCallFrame
	//
	// Evaluates expression on a given call frame.
	EvaluateOnCallFrame(context.Context, *cdpcmd.DebuggerEvaluateOnCallFrameArgs) (*cdpcmd.DebuggerEvaluateOnCallFrameReply, error)

	// Command SetVariableValue
	//
	// Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.
	SetVariableValue(context.Context, *cdpcmd.DebuggerSetVariableValueArgs) error

	// Command SetAsyncCallStackDepth
	//
	// Enables or disables async call stacks tracking.
	SetAsyncCallStackDepth(context.Context, *cdpcmd.DebuggerSetAsyncCallStackDepthArgs) error

	// Command SetBlackboxPatterns
	//
	// Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
	SetBlackboxPatterns(context.Context, *cdpcmd.DebuggerSetBlackboxPatternsArgs) error

	// Command SetBlackboxedRanges
	//
	// Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.
	SetBlackboxedRanges(context.Context, *cdpcmd.DebuggerSetBlackboxedRangesArgs) error

	// Event ScriptParsed
	//
	// Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
	ScriptParsed(context.Context) (cdpevent.DebuggerScriptParsedClient, error)

	// Event ScriptFailedToParse
	//
	// Fired when virtual machine fails to parse the script.
	ScriptFailedToParse(context.Context) (cdpevent.DebuggerScriptFailedToParseClient, error)

	// Event BreakpointResolved
	//
	// Fired when breakpoint is resolved to an actual script and location.
	BreakpointResolved(context.Context) (cdpevent.DebuggerBreakpointResolvedClient, error)

	// Event Paused
	//
	// Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
	Paused(context.Context) (cdpevent.DebuggerPausedClient, error)

	// Event Resumed
	//
	// Fired when the virtual machine resumed execution.
	Resumed(context.Context) (cdpevent.DebuggerResumedClient, error)
}

// The DeviceOrientation domain.
type DeviceOrientation interface {
	// Command SetDeviceOrientationOverride
	//
	// Overrides the Device Orientation.
	SetDeviceOrientationOverride(context.Context, *cdpcmd.DeviceOrientationSetDeviceOrientationOverrideArgs) error

	// Command ClearDeviceOrientationOverride
	//
	// Clears the overridden Device Orientation.
	ClearDeviceOrientationOverride(context.Context) error
}

// The Emulation domain. This domain emulates different environments for the page.
type Emulation interface {
	// Command SetDeviceMetricsOverride
	//
	// Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results).
	SetDeviceMetricsOverride(context.Context, *cdpcmd.EmulationSetDeviceMetricsOverrideArgs) error

	// Command ClearDeviceMetricsOverride
	//
	// Clears the overridden device metrics.
	ClearDeviceMetricsOverride(context.Context) error

	// Command ForceViewport
	//
	// Overrides the visible area of the page. The change is hidden from the page, i.e. the observable scroll position and page scale does not change. In effect, the command moves the specified area of the page into the top-left corner of the frame.
	ForceViewport(context.Context, *cdpcmd.EmulationForceViewportArgs) error

	// Command ResetViewport
	//
	// Resets the visible area of the page to the original viewport, undoing any effects of the forceViewport command.
	ResetViewport(context.Context) error

	// Command ResetPageScaleFactor
	//
	// Requests that page scale factor is reset to initial values.
	ResetPageScaleFactor(context.Context) error

	// Command SetPageScaleFactor
	//
	// Sets a specified page scale factor.
	SetPageScaleFactor(context.Context, *cdpcmd.EmulationSetPageScaleFactorArgs) error

	// Command SetVisibleSize
	//
	// Resizes the frame/viewport of the page. Note that this does not affect the frame's container (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported on Android.
	SetVisibleSize(context.Context, *cdpcmd.EmulationSetVisibleSizeArgs) error

	// Command SetScriptExecutionDisabled
	//
	// Switches script execution in the page.
	SetScriptExecutionDisabled(context.Context, *cdpcmd.EmulationSetScriptExecutionDisabledArgs) error

	// Command SetGeolocationOverride
	//
	// Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.
	SetGeolocationOverride(context.Context, *cdpcmd.EmulationSetGeolocationOverrideArgs) error

	// Command ClearGeolocationOverride
	//
	// Clears the overridden Geolocation Position and Error.
	ClearGeolocationOverride(context.Context) error

	// Command SetTouchEmulationEnabled
	//
	// Toggles mouse event-based touch event emulation.
	SetTouchEmulationEnabled(context.Context, *cdpcmd.EmulationSetTouchEmulationEnabledArgs) error

	// Command SetEmulatedMedia
	//
	// Emulates the given media for CSS media queries.
	SetEmulatedMedia(context.Context, *cdpcmd.EmulationSetEmulatedMediaArgs) error

	// Command SetCPUThrottlingRate
	//
	// Enables CPU throttling to emulate slow CPUs.
	SetCPUThrottlingRate(context.Context, *cdpcmd.EmulationSetCPUThrottlingRateArgs) error

	// Command CanEmulate
	//
	// Tells whether emulation is supported.
	CanEmulate(context.Context) (*cdpcmd.EmulationCanEmulateReply, error)

	// Command SetVirtualTimePolicy
	//
	// Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets the current virtual time policy.  Note this supersedes any previous time budget.
	SetVirtualTimePolicy(context.Context, *cdpcmd.EmulationSetVirtualTimePolicyArgs) error

	// Command SetDefaultBackgroundColorOverride
	//
	// Sets or clears an override of the default background color of the frame. This override is used if the content does not specify one.
	SetDefaultBackgroundColorOverride(context.Context, *cdpcmd.EmulationSetDefaultBackgroundColorOverrideArgs) error

	// Event VirtualTimeBudgetExpired
	//
	// Notification sent after the virual time budget for the current VirtualTimePolicy has run out.
	VirtualTimeBudgetExpired(context.Context) (cdpevent.EmulationVirtualTimeBudgetExpiredClient, error)
}

// The HeapProfiler domain.
type HeapProfiler interface {
	// Command Enable
	//
	//
	Enable(context.Context) error

	// Command Disable
	//
	//
	Disable(context.Context) error

	// Command StartTrackingHeapObjects
	//
	//
	StartTrackingHeapObjects(context.Context, *cdpcmd.HeapProfilerStartTrackingHeapObjectsArgs) error

	// Command StopTrackingHeapObjects
	//
	//
	StopTrackingHeapObjects(context.Context, *cdpcmd.HeapProfilerStopTrackingHeapObjectsArgs) error

	// Command TakeHeapSnapshot
	//
	//
	TakeHeapSnapshot(context.Context, *cdpcmd.HeapProfilerTakeHeapSnapshotArgs) error

	// Command CollectGarbage
	//
	//
	CollectGarbage(context.Context) error

	// Command GetObjectByHeapObjectID
	//
	//
	GetObjectByHeapObjectID(context.Context, *cdpcmd.HeapProfilerGetObjectByHeapObjectIDArgs) (*cdpcmd.HeapProfilerGetObjectByHeapObjectIDReply, error)

	// Command AddInspectedHeapObject
	//
	// Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
	AddInspectedHeapObject(context.Context, *cdpcmd.HeapProfilerAddInspectedHeapObjectArgs) error

	// Command GetHeapObjectID
	//
	//
	GetHeapObjectID(context.Context, *cdpcmd.HeapProfilerGetHeapObjectIDArgs) (*cdpcmd.HeapProfilerGetHeapObjectIDReply, error)

	// Command StartSampling
	//
	//
	StartSampling(context.Context, *cdpcmd.HeapProfilerStartSamplingArgs) error

	// Command StopSampling
	//
	//
	StopSampling(context.Context) (*cdpcmd.HeapProfilerStopSamplingReply, error)

	// Event AddHeapSnapshotChunk
	//
	//
	AddHeapSnapshotChunk(context.Context) (cdpevent.HeapProfilerAddHeapSnapshotChunkClient, error)

	// Event ResetProfiles
	//
	//
	ResetProfiles(context.Context) (cdpevent.HeapProfilerResetProfilesClient, error)

	// Event ReportHeapSnapshotProgress
	//
	//
	ReportHeapSnapshotProgress(context.Context) (cdpevent.HeapProfilerReportHeapSnapshotProgressClient, error)

	// Event LastSeenObjectID
	//
	// If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
	LastSeenObjectID(context.Context) (cdpevent.HeapProfilerLastSeenObjectIDClient, error)

	// Event HeapStatsUpdate
	//
	// If heap objects tracking has been started then backend may send update for one or more fragments
	HeapStatsUpdate(context.Context) (cdpevent.HeapProfilerHeapStatsUpdateClient, error)
}

// The IO domain. Input/Output operations for streams produced by DevTools.
type IO interface {
	// Command Read
	//
	// Read a chunk of the stream
	Read(context.Context, *cdpcmd.IOReadArgs) (*cdpcmd.IOReadReply, error)

	// Command Close
	//
	// Close the stream, discard any temporary backing storage.
	Close(context.Context, *cdpcmd.IOCloseArgs) error
}

// The IndexedDB domain.
type IndexedDB interface {
	// Command Enable
	//
	// Enables events from backend.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables events from backend.
	Disable(context.Context) error

	// Command RequestDatabaseNames
	//
	// Requests database names for given security origin.
	RequestDatabaseNames(context.Context, *cdpcmd.IndexedDBRequestDatabaseNamesArgs) (*cdpcmd.IndexedDBRequestDatabaseNamesReply, error)

	// Command RequestDatabase
	//
	// Requests database with given name in given frame.
	RequestDatabase(context.Context, *cdpcmd.IndexedDBRequestDatabaseArgs) (*cdpcmd.IndexedDBRequestDatabaseReply, error)

	// Command RequestData
	//
	// Requests data from object store or index.
	RequestData(context.Context, *cdpcmd.IndexedDBRequestDataArgs) (*cdpcmd.IndexedDBRequestDataReply, error)

	// Command ClearObjectStore
	//
	// Clears all entries from an object store.
	ClearObjectStore(context.Context, *cdpcmd.IndexedDBClearObjectStoreArgs) error

	// Command DeleteDatabase
	//
	// Deletes a database.
	DeleteDatabase(context.Context, *cdpcmd.IndexedDBDeleteDatabaseArgs) error
}

// The Input domain.
type Input interface {
	// Command SetIgnoreInputEvents
	//
	// Ignores input events (useful while auditing page).
	SetIgnoreInputEvents(context.Context, *cdpcmd.InputSetIgnoreInputEventsArgs) error

	// Command DispatchKeyEvent
	//
	// Dispatches a key event to the page.
	DispatchKeyEvent(context.Context, *cdpcmd.InputDispatchKeyEventArgs) error

	// Command DispatchMouseEvent
	//
	// Dispatches a mouse event to the page.
	DispatchMouseEvent(context.Context, *cdpcmd.InputDispatchMouseEventArgs) error

	// Command DispatchTouchEvent
	//
	// Dispatches a touch event to the page.
	DispatchTouchEvent(context.Context, *cdpcmd.InputDispatchTouchEventArgs) error

	// Command EmulateTouchFromMouseEvent
	//
	// Emulates touch event from the mouse event parameters.
	EmulateTouchFromMouseEvent(context.Context, *cdpcmd.InputEmulateTouchFromMouseEventArgs) error

	// Command SynthesizePinchGesture
	//
	// Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
	SynthesizePinchGesture(context.Context, *cdpcmd.InputSynthesizePinchGestureArgs) error

	// Command SynthesizeScrollGesture
	//
	// Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
	SynthesizeScrollGesture(context.Context, *cdpcmd.InputSynthesizeScrollGestureArgs) error

	// Command SynthesizeTapGesture
	//
	// Synthesizes a tap gesture over a time period by issuing appropriate touch events.
	SynthesizeTapGesture(context.Context, *cdpcmd.InputSynthesizeTapGestureArgs) error
}

// The Inspector domain.
type Inspector interface {
	// Command Enable
	//
	// Enables inspector domain notifications.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables inspector domain notifications.
	Disable(context.Context) error

	// Event Detached
	//
	// Fired when remote debugging connection is about to be terminated. Contains detach reason.
	Detached(context.Context) (cdpevent.InspectorDetachedClient, error)

	// Event TargetCrashed
	//
	// Fired when debugging target has crashed
	TargetCrashed(context.Context) (cdpevent.InspectorTargetCrashedClient, error)
}

// The LayerTree domain.
type LayerTree interface {
	// Command Enable
	//
	// Enables compositing tree inspection.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables compositing tree inspection.
	Disable(context.Context) error

	// Command CompositingReasons
	//
	// Provides the reasons why the given layer was composited.
	CompositingReasons(context.Context, *cdpcmd.LayerTreeCompositingReasonsArgs) (*cdpcmd.LayerTreeCompositingReasonsReply, error)

	// Command MakeSnapshot
	//
	// Returns the layer snapshot identifier.
	MakeSnapshot(context.Context, *cdpcmd.LayerTreeMakeSnapshotArgs) (*cdpcmd.LayerTreeMakeSnapshotReply, error)

	// Command LoadSnapshot
	//
	// Returns the snapshot identifier.
	LoadSnapshot(context.Context, *cdpcmd.LayerTreeLoadSnapshotArgs) (*cdpcmd.LayerTreeLoadSnapshotReply, error)

	// Command ReleaseSnapshot
	//
	// Releases layer snapshot captured by the back-end.
	ReleaseSnapshot(context.Context, *cdpcmd.LayerTreeReleaseSnapshotArgs) error

	// Command ProfileSnapshot
	//
	//
	ProfileSnapshot(context.Context, *cdpcmd.LayerTreeProfileSnapshotArgs) (*cdpcmd.LayerTreeProfileSnapshotReply, error)

	// Command ReplaySnapshot
	//
	// Replays the layer snapshot and returns the resulting bitmap.
	ReplaySnapshot(context.Context, *cdpcmd.LayerTreeReplaySnapshotArgs) (*cdpcmd.LayerTreeReplaySnapshotReply, error)

	// Command SnapshotCommandLog
	//
	// Replays the layer snapshot and returns canvas log.
	SnapshotCommandLog(context.Context, *cdpcmd.LayerTreeSnapshotCommandLogArgs) (*cdpcmd.LayerTreeSnapshotCommandLogReply, error)

	// Event LayerTreeDidChange
	//
	//
	LayerTreeDidChange(context.Context) (cdpevent.LayerTreeDidChangeClient, error)

	// Event LayerPainted
	//
	//
	LayerPainted(context.Context) (cdpevent.LayerTreeLayerPaintedClient, error)
}

// The Log domain. Provides access to log entries.
type Log interface {
	// Command Enable
	//
	// Enables log domain, sends the entries collected so far to the client by means of the entryAdded notification.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables log domain, prevents further log entries from being reported to the client.
	Disable(context.Context) error

	// Command Clear
	//
	// Clears the log.
	Clear(context.Context) error

	// Command StartViolationsReport
	//
	// start violation reporting.
	StartViolationsReport(context.Context, *cdpcmd.LogStartViolationsReportArgs) error

	// Command StopViolationsReport
	//
	// Stop violation reporting.
	StopViolationsReport(context.Context) error

	// Event EntryAdded
	//
	// Issued when new message was logged.
	EntryAdded(context.Context) (cdpevent.LogEntryAddedClient, error)
}

// The Memory domain.
type Memory interface {
	// Command GetDOMCounters
	//
	//
	GetDOMCounters(context.Context) (*cdpcmd.MemoryGetDOMCountersReply, error)

	// Command SetPressureNotificationsSuppressed
	//
	// Enable/disable suppressing memory pressure notifications in all processes.
	SetPressureNotificationsSuppressed(context.Context, *cdpcmd.MemorySetPressureNotificationsSuppressedArgs) error

	// Command SimulatePressureNotification
	//
	// Simulate a memory pressure notification in all processes.
	SimulatePressureNotification(context.Context, *cdpcmd.MemorySimulatePressureNotificationArgs) error
}

// The Network domain. Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.
type Network interface {
	// Command Enable
	//
	// Enables network tracking, network events will now be delivered to the client.
	Enable(context.Context, *cdpcmd.NetworkEnableArgs) error

	// Command Disable
	//
	// Disables network tracking, prevents network events from being sent to the client.
	Disable(context.Context) error

	// Command SetUserAgentOverride
	//
	// Allows overriding user agent with the given string.
	SetUserAgentOverride(context.Context, *cdpcmd.NetworkSetUserAgentOverrideArgs) error

	// Command SetExtraHTTPHeaders
	//
	// Specifies whether to always send extra HTTP headers with the requests from this page.
	SetExtraHTTPHeaders(context.Context, *cdpcmd.NetworkSetExtraHTTPHeadersArgs) error

	// Command GetResponseBody
	//
	// Returns content served for the given request.
	GetResponseBody(context.Context, *cdpcmd.NetworkGetResponseBodyArgs) (*cdpcmd.NetworkGetResponseBodyReply, error)

	// Command SetBlockedURLs
	//
	// Blocks URLs from loading.
	SetBlockedURLs(context.Context, *cdpcmd.NetworkSetBlockedURLsArgs) error

	// Command ReplayXHR
	//
	// This method sends a new XMLHttpRequest which is identical to the original one. The following parameters should be identical: method, url, async, request body, extra headers, withCredentials attribute, user, password.
	ReplayXHR(context.Context, *cdpcmd.NetworkReplayXHRArgs) error

	// Command CanClearBrowserCache
	//
	// Tells whether clearing browser cache is supported.
	CanClearBrowserCache(context.Context) (*cdpcmd.NetworkCanClearBrowserCacheReply, error)

	// Command ClearBrowserCache
	//
	// Clears browser cache.
	ClearBrowserCache(context.Context) error

	// Command CanClearBrowserCookies
	//
	// Tells whether clearing browser cookies is supported.
	CanClearBrowserCookies(context.Context) (*cdpcmd.NetworkCanClearBrowserCookiesReply, error)

	// Command ClearBrowserCookies
	//
	// Clears browser cookies.
	ClearBrowserCookies(context.Context) error

	// Command GetCookies
	//
	// Returns all browser cookies for the current URL. Depending on the backend support, will return detailed cookie information in the cookies field.
	GetCookies(context.Context, *cdpcmd.NetworkGetCookiesArgs) (*cdpcmd.NetworkGetCookiesReply, error)

	// Command GetAllCookies
	//
	// Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the cookies field.
	GetAllCookies(context.Context) (*cdpcmd.NetworkGetAllCookiesReply, error)

	// Command DeleteCookie
	//
	// Deletes browser cookie with given name, domain and path.
	DeleteCookie(context.Context, *cdpcmd.NetworkDeleteCookieArgs) error

	// Command SetCookie
	//
	// Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
	SetCookie(context.Context, *cdpcmd.NetworkSetCookieArgs) (*cdpcmd.NetworkSetCookieReply, error)

	// Command CanEmulateNetworkConditions
	//
	// Tells whether emulation of network conditions is supported.
	CanEmulateNetworkConditions(context.Context) (*cdpcmd.NetworkCanEmulateNetworkConditionsReply, error)

	// Command EmulateNetworkConditions
	//
	// Activates emulation of network conditions.
	EmulateNetworkConditions(context.Context, *cdpcmd.NetworkEmulateNetworkConditionsArgs) error

	// Command SetCacheDisabled
	//
	// Toggles ignoring cache for each request. If true, cache will not be used.
	SetCacheDisabled(context.Context, *cdpcmd.NetworkSetCacheDisabledArgs) error

	// Command SetBypassServiceWorker
	//
	// Toggles ignoring of service worker for each request.
	SetBypassServiceWorker(context.Context, *cdpcmd.NetworkSetBypassServiceWorkerArgs) error

	// Command SetDataSizeLimitsForTest
	//
	// For testing.
	SetDataSizeLimitsForTest(context.Context, *cdpcmd.NetworkSetDataSizeLimitsForTestArgs) error

	// Command GetCertificate
	//
	// Returns the DER-encoded certificate.
	GetCertificate(context.Context, *cdpcmd.NetworkGetCertificateArgs) (*cdpcmd.NetworkGetCertificateReply, error)

	// Command EnableRequestInterception
	//
	//
	EnableRequestInterception(context.Context, *cdpcmd.NetworkEnableRequestInterceptionArgs) error

	// Command ContinueInterceptedRequest
	//
	// Response to Network.requestIntercepted which either modifies the request to continue with any modifications, or blocks it, or completes it with the provided response bytes. If a network fetch occurs as a result which encounters a redirect an additional Network.requestIntercepted event will be sent with the same InterceptionId.
	ContinueInterceptedRequest(context.Context, *cdpcmd.NetworkContinueInterceptedRequestArgs) error

	// Event ResourceChangedPriority
	//
	// Fired when resource loading priority is changed
	ResourceChangedPriority(context.Context) (cdpevent.NetworkResourceChangedPriorityClient, error)

	// Event RequestWillBeSent
	//
	// Fired when page is about to send HTTP request.
	RequestWillBeSent(context.Context) (cdpevent.NetworkRequestWillBeSentClient, error)

	// Event RequestServedFromCache
	//
	// Fired if request ended up loading from cache.
	RequestServedFromCache(context.Context) (cdpevent.NetworkRequestServedFromCacheClient, error)

	// Event ResponseReceived
	//
	// Fired when HTTP response is available.
	ResponseReceived(context.Context) (cdpevent.NetworkResponseReceivedClient, error)

	// Event DataReceived
	//
	// Fired when data chunk was received over the network.
	DataReceived(context.Context) (cdpevent.NetworkDataReceivedClient, error)

	// Event LoadingFinished
	//
	// Fired when HTTP request has finished loading.
	LoadingFinished(context.Context) (cdpevent.NetworkLoadingFinishedClient, error)

	// Event LoadingFailed
	//
	// Fired when HTTP request has failed to load.
	LoadingFailed(context.Context) (cdpevent.NetworkLoadingFailedClient, error)

	// Event WebSocketWillSendHandshakeRequest
	//
	// Fired when WebSocket is about to initiate handshake.
	WebSocketWillSendHandshakeRequest(context.Context) (cdpevent.NetworkWebSocketWillSendHandshakeRequestClient, error)

	// Event WebSocketHandshakeResponseReceived
	//
	// Fired when WebSocket handshake response becomes available.
	WebSocketHandshakeResponseReceived(context.Context) (cdpevent.NetworkWebSocketHandshakeResponseReceivedClient, error)

	// Event WebSocketCreated
	//
	// Fired upon WebSocket creation.
	WebSocketCreated(context.Context) (cdpevent.NetworkWebSocketCreatedClient, error)

	// Event WebSocketClosed
	//
	// Fired when WebSocket is closed.
	WebSocketClosed(context.Context) (cdpevent.NetworkWebSocketClosedClient, error)

	// Event WebSocketFrameReceived
	//
	// Fired when WebSocket frame is received.
	WebSocketFrameReceived(context.Context) (cdpevent.NetworkWebSocketFrameReceivedClient, error)

	// Event WebSocketFrameError
	//
	// Fired when WebSocket frame error occurs.
	WebSocketFrameError(context.Context) (cdpevent.NetworkWebSocketFrameErrorClient, error)

	// Event WebSocketFrameSent
	//
	// Fired when WebSocket frame is sent.
	WebSocketFrameSent(context.Context) (cdpevent.NetworkWebSocketFrameSentClient, error)

	// Event EventSourceMessageReceived
	//
	// Fired when EventSource message is received.
	EventSourceMessageReceived(context.Context) (cdpevent.NetworkEventSourceMessageReceivedClient, error)

	// Event RequestIntercepted
	//
	// Details of an intercepted HTTP request, which must be either allowed, blocked, modified or mocked.
	RequestIntercepted(context.Context) (cdpevent.NetworkRequestInterceptedClient, error)
}

// The Overlay domain. This domain provides various functionality related to drawing atop the inspected page.
type Overlay interface {
	// Command Enable
	//
	// Enables domain notifications.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables domain notifications.
	Disable(context.Context) error

	// Command SetShowPaintRects
	//
	// Requests that backend shows paint rectangles
	SetShowPaintRects(context.Context, *cdpcmd.OverlaySetShowPaintRectsArgs) error

	// Command SetShowDebugBorders
	//
	// Requests that backend shows debug borders on layers
	SetShowDebugBorders(context.Context, *cdpcmd.OverlaySetShowDebugBordersArgs) error

	// Command SetShowFPSCounter
	//
	// Requests that backend shows the FPS counter
	SetShowFPSCounter(context.Context, *cdpcmd.OverlaySetShowFPSCounterArgs) error

	// Command SetShowScrollBottleneckRects
	//
	// Requests that backend shows scroll bottleneck rects
	SetShowScrollBottleneckRects(context.Context, *cdpcmd.OverlaySetShowScrollBottleneckRectsArgs) error

	// Command SetShowViewportSizeOnResize
	//
	// Paints viewport size upon main frame resize.
	SetShowViewportSizeOnResize(context.Context, *cdpcmd.OverlaySetShowViewportSizeOnResizeArgs) error

	// Command SetPausedInDebuggerMessage
	//
	//
	SetPausedInDebuggerMessage(context.Context, *cdpcmd.OverlaySetPausedInDebuggerMessageArgs) error

	// Command SetSuspended
	//
	//
	SetSuspended(context.Context, *cdpcmd.OverlaySetSuspendedArgs) error

	// Command SetInspectMode
	//
	// Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspectNodeRequested' event upon element selection.
	SetInspectMode(context.Context, *cdpcmd.OverlaySetInspectModeArgs) error

	// Command HighlightRect
	//
	// Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
	HighlightRect(context.Context, *cdpcmd.OverlayHighlightRectArgs) error

	// Command HighlightQuad
	//
	// Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
	HighlightQuad(context.Context, *cdpcmd.OverlayHighlightQuadArgs) error

	// Command HighlightNode
	//
	// Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified.
	HighlightNode(context.Context, *cdpcmd.OverlayHighlightNodeArgs) error

	// Command HighlightFrame
	//
	// Highlights owner element of the frame with given id.
	HighlightFrame(context.Context, *cdpcmd.OverlayHighlightFrameArgs) error

	// Command HideHighlight
	//
	// Hides any highlight.
	HideHighlight(context.Context) error

	// Command GetHighlightObjectForTest
	//
	// For testing.
	GetHighlightObjectForTest(context.Context, *cdpcmd.OverlayGetHighlightObjectForTestArgs) (*cdpcmd.OverlayGetHighlightObjectForTestReply, error)

	// Event NodeHighlightRequested
	//
	// Fired when the node should be highlighted. This happens after call to setInspectMode.
	NodeHighlightRequested(context.Context) (cdpevent.OverlayNodeHighlightRequestedClient, error)

	// Event InspectNodeRequested
	//
	// Fired when the node should be inspected. This happens after call to setInspectMode or when user manually inspects an element.
	InspectNodeRequested(context.Context) (cdpevent.OverlayInspectNodeRequestedClient, error)
}

// The Page domain. Actions and events related to the inspected page belong to the page domain.
type Page interface {
	// Command Enable
	//
	// Enables page domain notifications.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables page domain notifications.
	Disable(context.Context) error

	// Command AddScriptToEvaluateOnLoad
	//
	//
	AddScriptToEvaluateOnLoad(context.Context, *cdpcmd.PageAddScriptToEvaluateOnLoadArgs) (*cdpcmd.PageAddScriptToEvaluateOnLoadReply, error)

	// Command RemoveScriptToEvaluateOnLoad
	//
	//
	RemoveScriptToEvaluateOnLoad(context.Context, *cdpcmd.PageRemoveScriptToEvaluateOnLoadArgs) error

	// Command SetAutoAttachToCreatedPages
	//
	// Controls whether browser will open a new inspector window for connected pages.
	SetAutoAttachToCreatedPages(context.Context, *cdpcmd.PageSetAutoAttachToCreatedPagesArgs) error

	// Command Reload
	//
	// Reloads given page optionally ignoring the cache.
	Reload(context.Context, *cdpcmd.PageReloadArgs) error

	// Command Navigate
	//
	// Navigates current page to the given URL.
	Navigate(context.Context, *cdpcmd.PageNavigateArgs) (*cdpcmd.PageNavigateReply, error)

	// Command StopLoading
	//
	// Force the page stop all navigations and pending resource fetches.
	StopLoading(context.Context) error

	// Command GetNavigationHistory
	//
	// Returns navigation history for the current page.
	GetNavigationHistory(context.Context) (*cdpcmd.PageGetNavigationHistoryReply, error)

	// Command NavigateToHistoryEntry
	//
	// Navigates current page to the given history entry.
	NavigateToHistoryEntry(context.Context, *cdpcmd.PageNavigateToHistoryEntryArgs) error

	// Command GetCookies
	//
	// Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the cookies field.
	GetCookies(context.Context) (*cdpcmd.PageGetCookiesReply, error)

	// Command DeleteCookie
	//
	// Deletes browser cookie with given name, domain and path.
	DeleteCookie(context.Context, *cdpcmd.PageDeleteCookieArgs) error

	// Command GetResourceTree
	//
	// Returns present frame / resource tree structure.
	GetResourceTree(context.Context) (*cdpcmd.PageGetResourceTreeReply, error)

	// Command GetResourceContent
	//
	// Returns content of the given resource.
	GetResourceContent(context.Context, *cdpcmd.PageGetResourceContentArgs) (*cdpcmd.PageGetResourceContentReply, error)

	// Command SearchInResource
	//
	// Searches for given string in resource content.
	SearchInResource(context.Context, *cdpcmd.PageSearchInResourceArgs) (*cdpcmd.PageSearchInResourceReply, error)

	// Command SetDocumentContent
	//
	// Sets given markup as the document's HTML.
	SetDocumentContent(context.Context, *cdpcmd.PageSetDocumentContentArgs) error

	// Command SetDeviceMetricsOverride
	//
	// Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results).
	SetDeviceMetricsOverride(context.Context, *cdpcmd.PageSetDeviceMetricsOverrideArgs) error

	// Command ClearDeviceMetricsOverride
	//
	// Clears the overridden device metrics.
	ClearDeviceMetricsOverride(context.Context) error

	// Command SetGeolocationOverride
	//
	// Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.
	SetGeolocationOverride(context.Context, *cdpcmd.PageSetGeolocationOverrideArgs) error

	// Command ClearGeolocationOverride
	//
	// Clears the overridden Geolocation Position and Error.
	ClearGeolocationOverride(context.Context) error

	// Command SetDeviceOrientationOverride
	//
	// Overrides the Device Orientation.
	SetDeviceOrientationOverride(context.Context, *cdpcmd.PageSetDeviceOrientationOverrideArgs) error

	// Command ClearDeviceOrientationOverride
	//
	// Clears the overridden Device Orientation.
	ClearDeviceOrientationOverride(context.Context) error

	// Command SetTouchEmulationEnabled
	//
	// Toggles mouse event-based touch event emulation.
	SetTouchEmulationEnabled(context.Context, *cdpcmd.PageSetTouchEmulationEnabledArgs) error

	// Command CaptureScreenshot
	//
	// Capture page screenshot.
	CaptureScreenshot(context.Context, *cdpcmd.PageCaptureScreenshotArgs) (*cdpcmd.PageCaptureScreenshotReply, error)

	// Command PrintToPDF
	//
	// Print page as PDF.
	PrintToPDF(context.Context, *cdpcmd.PagePrintToPDFArgs) (*cdpcmd.PagePrintToPDFReply, error)

	// Command StartScreencast
	//
	// Starts sending each frame using the screencastFrame event.
	StartScreencast(context.Context, *cdpcmd.PageStartScreencastArgs) error

	// Command StopScreencast
	//
	// Stops sending each frame in the screencastFrame.
	StopScreencast(context.Context) error

	// Command ScreencastFrameAck
	//
	// Acknowledges that a screencast frame has been received by the frontend.
	ScreencastFrameAck(context.Context, *cdpcmd.PageScreencastFrameAckArgs) error

	// Command HandleJavaScriptDialog
	//
	// Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).
	HandleJavaScriptDialog(context.Context, *cdpcmd.PageHandleJavaScriptDialogArgs) error

	// Command GetAppManifest
	//
	//
	GetAppManifest(context.Context) (*cdpcmd.PageGetAppManifestReply, error)

	// Command RequestAppBanner
	//
	//
	RequestAppBanner(context.Context) error

	// Command SetControlNavigations
	//
	// Toggles navigation throttling which allows programatic control over navigation and redirect response.
	SetControlNavigations(context.Context, *cdpcmd.PageSetControlNavigationsArgs) error

	// Command ProcessNavigation
	//
	// Should be sent in response to a navigationRequested or a redirectRequested event, telling the browser how to handle the navigation.
	ProcessNavigation(context.Context, *cdpcmd.PageProcessNavigationArgs) error

	// Command GetLayoutMetrics
	//
	// Returns metrics relating to the layouting of the page, such as viewport bounds/scale.
	GetLayoutMetrics(context.Context) (*cdpcmd.PageGetLayoutMetricsReply, error)

	// Command CreateIsolatedWorld
	//
	// Creates an isolated world for the given frame.
	CreateIsolatedWorld(context.Context, *cdpcmd.PageCreateIsolatedWorldArgs) error

	// Event DOMContentEventFired
	//
	//
	DOMContentEventFired(context.Context) (cdpevent.PageDOMContentEventFiredClient, error)

	// Event LoadEventFired
	//
	//
	LoadEventFired(context.Context) (cdpevent.PageLoadEventFiredClient, error)

	// Event FrameAttached
	//
	// Fired when frame has been attached to its parent.
	FrameAttached(context.Context) (cdpevent.PageFrameAttachedClient, error)

	// Event FrameNavigated
	//
	// Fired once navigation of the frame has completed. Frame is now associated with the new loader.
	FrameNavigated(context.Context) (cdpevent.PageFrameNavigatedClient, error)

	// Event FrameDetached
	//
	// Fired when frame has been detached from its parent.
	FrameDetached(context.Context) (cdpevent.PageFrameDetachedClient, error)

	// Event FrameStartedLoading
	//
	// Fired when frame has started loading.
	FrameStartedLoading(context.Context) (cdpevent.PageFrameStartedLoadingClient, error)

	// Event FrameStoppedLoading
	//
	// Fired when frame has stopped loading.
	FrameStoppedLoading(context.Context) (cdpevent.PageFrameStoppedLoadingClient, error)

	// Event FrameScheduledNavigation
	//
	// Fired when frame schedules a potential navigation.
	FrameScheduledNavigation(context.Context) (cdpevent.PageFrameScheduledNavigationClient, error)

	// Event FrameClearedScheduledNavigation
	//
	// Fired when frame no longer has a scheduled navigation.
	FrameClearedScheduledNavigation(context.Context) (cdpevent.PageFrameClearedScheduledNavigationClient, error)

	// Event FrameResized
	//
	//
	FrameResized(context.Context) (cdpevent.PageFrameResizedClient, error)

	// Event JavascriptDialogOpening
	//
	// Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.
	JavascriptDialogOpening(context.Context) (cdpevent.PageJavascriptDialogOpeningClient, error)

	// Event JavascriptDialogClosed
	//
	// Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed.
	JavascriptDialogClosed(context.Context) (cdpevent.PageJavascriptDialogClosedClient, error)

	// Event ScreencastFrame
	//
	// Compressed image data requested by the startScreencast.
	ScreencastFrame(context.Context) (cdpevent.PageScreencastFrameClient, error)

	// Event ScreencastVisibilityChanged
	//
	// Fired when the page with currently enabled screencast was shown or hidden .
	ScreencastVisibilityChanged(context.Context) (cdpevent.PageScreencastVisibilityChangedClient, error)

	// Event InterstitialShown
	//
	// Fired when interstitial page was shown
	InterstitialShown(context.Context) (cdpevent.PageInterstitialShownClient, error)

	// Event InterstitialHidden
	//
	// Fired when interstitial page was hidden
	InterstitialHidden(context.Context) (cdpevent.PageInterstitialHiddenClient, error)

	// Event NavigationRequested
	//
	// Fired when a navigation is started if navigation throttles are enabled.  The navigation will be deferred until processNavigation is called.
	NavigationRequested(context.Context) (cdpevent.PageNavigationRequestedClient, error)
}

// The Profiler domain.
type Profiler interface {
	// Command Enable
	//
	//
	Enable(context.Context) error

	// Command Disable
	//
	//
	Disable(context.Context) error

	// Command SetSamplingInterval
	//
	// Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
	SetSamplingInterval(context.Context, *cdpcmd.ProfilerSetSamplingIntervalArgs) error

	// Command Start
	//
	//
	Start(context.Context) error

	// Command Stop
	//
	//
	Stop(context.Context) (*cdpcmd.ProfilerStopReply, error)

	// Command StartPreciseCoverage
	//
	// Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.
	StartPreciseCoverage(context.Context, *cdpcmd.ProfilerStartPreciseCoverageArgs) error

	// Command StopPreciseCoverage
	//
	// Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.
	StopPreciseCoverage(context.Context) error

	// Command TakePreciseCoverage
	//
	// Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.
	TakePreciseCoverage(context.Context) (*cdpcmd.ProfilerTakePreciseCoverageReply, error)

	// Command GetBestEffortCoverage
	//
	// Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
	GetBestEffortCoverage(context.Context) (*cdpcmd.ProfilerGetBestEffortCoverageReply, error)

	// Event ConsoleProfileStarted
	//
	// Sent when new profile recording is started using console.profile() call.
	ConsoleProfileStarted(context.Context) (cdpevent.ProfilerConsoleProfileStartedClient, error)

	// Event ConsoleProfileFinished
	//
	//
	ConsoleProfileFinished(context.Context) (cdpevent.ProfilerConsoleProfileFinishedClient, error)
}

// The Runtime domain. Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group.
type Runtime interface {
	// Command Evaluate
	//
	// Evaluates expression on global object.
	Evaluate(context.Context, *cdpcmd.RuntimeEvaluateArgs) (*cdpcmd.RuntimeEvaluateReply, error)

	// Command AwaitPromise
	//
	// Add handler to promise with given promise object id.
	AwaitPromise(context.Context, *cdpcmd.RuntimeAwaitPromiseArgs) (*cdpcmd.RuntimeAwaitPromiseReply, error)

	// Command CallFunctionOn
	//
	// Calls function with given declaration on the given object. Object group of the result is inherited from the target object.
	CallFunctionOn(context.Context, *cdpcmd.RuntimeCallFunctionOnArgs) (*cdpcmd.RuntimeCallFunctionOnReply, error)

	// Command GetProperties
	//
	// Returns properties of a given object. Object group of the result is inherited from the target object.
	GetProperties(context.Context, *cdpcmd.RuntimeGetPropertiesArgs) (*cdpcmd.RuntimeGetPropertiesReply, error)

	// Command ReleaseObject
	//
	// Releases remote object with given id.
	ReleaseObject(context.Context, *cdpcmd.RuntimeReleaseObjectArgs) error

	// Command ReleaseObjectGroup
	//
	// Releases all remote objects that belong to a given group.
	ReleaseObjectGroup(context.Context, *cdpcmd.RuntimeReleaseObjectGroupArgs) error

	// Command RunIfWaitingForDebugger
	//
	// Tells inspected instance to run if it was waiting for debugger to attach.
	RunIfWaitingForDebugger(context.Context) error

	// Command Enable
	//
	// Enables reporting of execution contexts creation by means of executionContextCreated event. When the reporting gets enabled the event will be sent immediately for each existing execution context.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables reporting of execution contexts creation.
	Disable(context.Context) error

	// Command DiscardConsoleEntries
	//
	// Discards collected exceptions and console API calls.
	DiscardConsoleEntries(context.Context) error

	// Command SetCustomObjectFormatterEnabled
	//
	//
	SetCustomObjectFormatterEnabled(context.Context, *cdpcmd.RuntimeSetCustomObjectFormatterEnabledArgs) error

	// Command CompileScript
	//
	// Compiles expression.
	CompileScript(context.Context, *cdpcmd.RuntimeCompileScriptArgs) (*cdpcmd.RuntimeCompileScriptReply, error)

	// Command RunScript
	//
	// Runs script with given id in a given context.
	RunScript(context.Context, *cdpcmd.RuntimeRunScriptArgs) (*cdpcmd.RuntimeRunScriptReply, error)

	// Event ExecutionContextCreated
	//
	// Issued when new execution context is created.
	ExecutionContextCreated(context.Context) (cdpevent.RuntimeExecutionContextCreatedClient, error)

	// Event ExecutionContextDestroyed
	//
	// Issued when execution context is destroyed.
	ExecutionContextDestroyed(context.Context) (cdpevent.RuntimeExecutionContextDestroyedClient, error)

	// Event ExecutionContextsCleared
	//
	// Issued when all executionContexts were cleared in browser
	ExecutionContextsCleared(context.Context) (cdpevent.RuntimeExecutionContextsClearedClient, error)

	// Event ExceptionThrown
	//
	// Issued when exception was thrown and unhandled.
	ExceptionThrown(context.Context) (cdpevent.RuntimeExceptionThrownClient, error)

	// Event ExceptionRevoked
	//
	// Issued when unhandled exception was revoked.
	ExceptionRevoked(context.Context) (cdpevent.RuntimeExceptionRevokedClient, error)

	// Event ConsoleAPICalled
	//
	// Issued when console API was called.
	ConsoleAPICalled(context.Context) (cdpevent.RuntimeConsoleAPICalledClient, error)

	// Event InspectRequested
	//
	// Issued when object should be inspected (for example, as a result of inspect() command line API call).
	InspectRequested(context.Context) (cdpevent.RuntimeInspectRequestedClient, error)
}

// The Schema domain. Provides information about the protocol schema.
type Schema interface {
	// Command GetDomains
	//
	// Returns supported domains.
	GetDomains(context.Context) (*cdpcmd.SchemaGetDomainsReply, error)
}

// The Security domain. Security
type Security interface {
	// Command Enable
	//
	// Enables tracking security state changes.
	Enable(context.Context) error

	// Command Disable
	//
	// Disables tracking security state changes.
	Disable(context.Context) error

	// Command ShowCertificateViewer
	//
	// Displays native dialog with the certificate details.
	ShowCertificateViewer(context.Context) error

	// Command HandleCertificateError
	//
	// Handles a certificate error that fired a certificateError event.
	HandleCertificateError(context.Context, *cdpcmd.SecurityHandleCertificateErrorArgs) error

	// Command SetOverrideCertificateErrors
	//
	// Enable/disable overriding certificate errors. If enabled, all certificate error events need to be handled by the DevTools client and should be answered with handleCertificateError commands.
	SetOverrideCertificateErrors(context.Context, *cdpcmd.SecuritySetOverrideCertificateErrorsArgs) error

	// Event SecurityStateChanged
	//
	// The security state of the page changed.
	SecurityStateChanged(context.Context) (cdpevent.SecurityStateChangedClient, error)

	// Event CertificateError
	//
	// There is a certificate error. If overriding certificate errors is enabled, then it should be handled with the handleCertificateError command. Note: this event does not fire if the certificate error has been allowed internally.
	CertificateError(context.Context) (cdpevent.SecurityCertificateErrorClient, error)
}

// The ServiceWorker domain.
type ServiceWorker interface {
	// Command Enable
	//
	//
	Enable(context.Context) error

	// Command Disable
	//
	//
	Disable(context.Context) error

	// Command Unregister
	//
	//
	Unregister(context.Context, *cdpcmd.ServiceWorkerUnregisterArgs) error

	// Command UpdateRegistration
	//
	//
	UpdateRegistration(context.Context, *cdpcmd.ServiceWorkerUpdateRegistrationArgs) error

	// Command StartWorker
	//
	//
	StartWorker(context.Context, *cdpcmd.ServiceWorkerStartWorkerArgs) error

	// Command SkipWaiting
	//
	//
	SkipWaiting(context.Context, *cdpcmd.ServiceWorkerSkipWaitingArgs) error

	// Command StopWorker
	//
	//
	StopWorker(context.Context, *cdpcmd.ServiceWorkerStopWorkerArgs) error

	// Command InspectWorker
	//
	//
	InspectWorker(context.Context, *cdpcmd.ServiceWorkerInspectWorkerArgs) error

	// Command SetForceUpdateOnPageLoad
	//
	//
	SetForceUpdateOnPageLoad(context.Context, *cdpcmd.ServiceWorkerSetForceUpdateOnPageLoadArgs) error

	// Command DeliverPushMessage
	//
	//
	DeliverPushMessage(context.Context, *cdpcmd.ServiceWorkerDeliverPushMessageArgs) error

	// Command DispatchSyncEvent
	//
	//
	DispatchSyncEvent(context.Context, *cdpcmd.ServiceWorkerDispatchSyncEventArgs) error

	// Event WorkerRegistrationUpdated
	//
	//
	WorkerRegistrationUpdated(context.Context) (cdpevent.ServiceWorkerWorkerRegistrationUpdatedClient, error)

	// Event WorkerVersionUpdated
	//
	//
	WorkerVersionUpdated(context.Context) (cdpevent.ServiceWorkerWorkerVersionUpdatedClient, error)

	// Event WorkerErrorReported
	//
	//
	WorkerErrorReported(context.Context) (cdpevent.ServiceWorkerWorkerErrorReportedClient, error)
}

// The Storage domain.
type Storage interface {
	// Command ClearDataForOrigin
	//
	// Clears storage for origin.
	ClearDataForOrigin(context.Context, *cdpcmd.StorageClearDataForOriginArgs) error
}

// The SystemInfo domain. The SystemInfo domain defines methods and events for querying low-level system information.
type SystemInfo interface {
	// Command GetInfo
	//
	// Returns information about the system.
	GetInfo(context.Context) (*cdpcmd.SystemInfoGetInfoReply, error)
}

// The Target domain. Supports additional targets discovery and allows to attach to them.
type Target interface {
	// Command SetDiscoverTargets
	//
	// Controls whether to discover available targets and notify via targetCreated/targetDestroyed events.
	SetDiscoverTargets(context.Context, *cdpcmd.TargetSetDiscoverTargetsArgs) error

	// Command SetAutoAttach
	//
	// Controls whether to automatically attach to new targets which are considered to be related to this one. When turned on, attaches to all existing related targets as well. When turned off, automatically detaches from all currently attached targets.
	SetAutoAttach(context.Context, *cdpcmd.TargetSetAutoAttachArgs) error

	// Command SetAttachToFrames
	//
	//
	SetAttachToFrames(context.Context, *cdpcmd.TargetSetAttachToFramesArgs) error

	// Command SetRemoteLocations
	//
	// Enables target discovery for the specified locations, when setDiscoverTargets was set to true.
	SetRemoteLocations(context.Context, *cdpcmd.TargetSetRemoteLocationsArgs) error

	// Command SendMessageToTarget
	//
	// Sends protocol message to the target with given id.
	SendMessageToTarget(context.Context, *cdpcmd.TargetSendMessageToTargetArgs) error

	// Command GetTargetInfo
	//
	// Returns information about a target.
	GetTargetInfo(context.Context, *cdpcmd.TargetGetTargetInfoArgs) (*cdpcmd.TargetGetTargetInfoReply, error)

	// Command ActivateTarget
	//
	// Activates (focuses) the target.
	ActivateTarget(context.Context, *cdpcmd.TargetActivateTargetArgs) error

	// Command CloseTarget
	//
	// Closes the target. If the target is a page that gets closed too.
	CloseTarget(context.Context, *cdpcmd.TargetCloseTargetArgs) (*cdpcmd.TargetCloseTargetReply, error)

	// Command AttachToTarget
	//
	// Attaches to the target with given id.
	AttachToTarget(context.Context, *cdpcmd.TargetAttachToTargetArgs) (*cdpcmd.TargetAttachToTargetReply, error)

	// Command DetachFromTarget
	//
	// Detaches from the target with given id.
	DetachFromTarget(context.Context, *cdpcmd.TargetDetachFromTargetArgs) error

	// Command CreateBrowserContext
	//
	// Creates a new empty BrowserContext. Similar to an incognito profile but you can have more than one.
	CreateBrowserContext(context.Context) (*cdpcmd.TargetCreateBrowserContextReply, error)

	// Command DisposeBrowserContext
	//
	// Deletes a BrowserContext, will fail of any open page uses it.
	DisposeBrowserContext(context.Context, *cdpcmd.TargetDisposeBrowserContextArgs) (*cdpcmd.TargetDisposeBrowserContextReply, error)

	// Command CreateTarget
	//
	// Creates a new page.
	CreateTarget(context.Context, *cdpcmd.TargetCreateTargetArgs) (*cdpcmd.TargetCreateTargetReply, error)

	// Command GetTargets
	//
	// Retrieves a list of available targets.
	GetTargets(context.Context) (*cdpcmd.TargetGetTargetsReply, error)

	// Event TargetCreated
	//
	// Issued when a possible inspection target is created.
	TargetCreated(context.Context) (cdpevent.TargetCreatedClient, error)

	// Event TargetDestroyed
	//
	// Issued when a target is destroyed.
	TargetDestroyed(context.Context) (cdpevent.TargetDestroyedClient, error)

	// Event AttachedToTarget
	//
	// Issued when attached to target because of auto-attach or attachToTarget command.
	AttachedToTarget(context.Context) (cdpevent.TargetAttachedToTargetClient, error)

	// Event DetachedFromTarget
	//
	// Issued when detached from target for any reason (including detachFromTarget command).
	DetachedFromTarget(context.Context) (cdpevent.TargetDetachedFromTargetClient, error)

	// Event ReceivedMessageFromTarget
	//
	// Notifies about new protocol message from attached target.
	ReceivedMessageFromTarget(context.Context) (cdpevent.TargetReceivedMessageFromTargetClient, error)
}

// The Tethering domain. The Tethering domain defines methods and events for browser port binding.
type Tethering interface {
	// Command Bind
	//
	// Request browser port binding.
	Bind(context.Context, *cdpcmd.TetheringBindArgs) error

	// Command Unbind
	//
	// Request browser port unbinding.
	Unbind(context.Context, *cdpcmd.TetheringUnbindArgs) error

	// Event Accepted
	//
	// Informs that port was successfully bound and got a specified connection id.
	Accepted(context.Context) (cdpevent.TetheringAcceptedClient, error)
}

// The Tracing domain.
type Tracing interface {
	// Command Start
	//
	// Start trace events collection.
	Start(context.Context, *cdpcmd.TracingStartArgs) error

	// Command End
	//
	// Stop trace events collection.
	End(context.Context) error

	// Command GetCategories
	//
	// Gets supported tracing categories.
	GetCategories(context.Context) (*cdpcmd.TracingGetCategoriesReply, error)

	// Command RequestMemoryDump
	//
	// Request a global memory dump.
	RequestMemoryDump(context.Context) (*cdpcmd.TracingRequestMemoryDumpReply, error)

	// Command RecordClockSyncMarker
	//
	// Record a clock sync marker in the trace.
	RecordClockSyncMarker(context.Context, *cdpcmd.TracingRecordClockSyncMarkerArgs) error

	// Event DataCollected
	//
	// Contains an bucket of collected trace events. When tracing is stopped collected events will be send as a sequence of dataCollected events followed by tracingComplete event.
	DataCollected(context.Context) (cdpevent.TracingDataCollectedClient, error)

	// Event TracingComplete
	//
	// Signals that tracing is stopped and there is no trace buffers pending flush, all data were delivered via dataCollected events.
	TracingComplete(context.Context) (cdpevent.TracingCompleteClient, error)

	// Event BufferUsage
	//
	//
	BufferUsage(context.Context) (cdpevent.TracingBufferUsageClient, error)
}
